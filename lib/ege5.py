def f(x,q):
    alf = '0123456789ABCDEFGHIJKLMNOPQRST'
    a = ''
    if x == 0: return '0'
    while x > 0:
        a += alf[x % q]
        x //= q
    return a[::-1]

'''
(№ 141) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим
образом.
1. Строится двоичная запись числа N.
2. К этой записи дописываются справа ещё два разряда по следующему правилу:
а) складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа
(справа). Например, запись 11100 преобразуется в запись 111001;
б) над этой записью производятся те же действия – справа дописывается остаток от деления суммы цифр на 2.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N)
является двоичной записью искомого числа R. Укажите такое наименьшее число N, для которого результат работы
алгоритма больше 137. В ответе это число запишите в десятичной системе счисления.
'''

##for n in range(1, 2000):
##    r = bin(n)[2:]
##    r += str(r.count('1')%2)
##    r += str(r.count('1')%2)
##    r = int(r, 2)
##    if r > 137:
##        print(n)
##        break

'''
(№ 7405) (А. Минак) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R
следующим образом.
1. Строится запись числа N в тринадцатеричной системе счисления.
2. Далее эта запись обрабатывается по следующему правилу:
  а) складываются числовые значения всех цифр этой тринадцатеричной записи, и остаток от деления этой
  суммы на 13 в тринадцатеричной системе счисления дописывается в конец числа (справа);
  б) над этой записью производятся те же действия – справа дописывается остаток от деления суммы числовых
  значений её цифр на 13.
Полученная таким образом запись является тринадцатеричной записью искомого числа R. Например, для
исходного числа 77 = 5C13 результатом является число 5C4813 = 13073. Укажите число N, после обработки
которого с помощью этого алгоритма получается наибольшее число R, меньшее 6000.
'''
##mx = 0
##mn = 1
##
##for n in range(1, 40):
##    r = f(n, 13)
##    k = sum(int(x, 13) for x in r)%13
##    r += str(f(k,13))
##    k = sum(int(x, 13) for x in r)%13
##    r += str(f(k,13))
##    r = int(r, 13)
##    if r < 6000 and r >= mx:
##        mx = r
##        mn = n
##print(mn)


'''
(№ 7666) *(П. Финкель) На вход алгоритма подаётся пятизначное натуральное число N. Алгоритм строит по нему
новое число R следующим образом:
1. Число N переводится в двадцатеричную систему счисления.
2. Далее эта запись обрабатывается по следующему правилу:
  а) гласные буквы (A, E, I) заменяются на 1;
  б) в конец полученной записи дописывается остаток от деления числа N на 20 в двадцатеричной системе
  счисления;
  в) первая цифра переставляется в конец записи.
3. Действия а)-в) в п. 2. повторяются еще раз.
Полученная таким образом запись записью искомого числа R в двадцатеричной системе счисления. Укажите
максимальное число R, кратное 2030, которое может быть получено в результате работы алгоритма.
Запишите его в ответе в десятичной системе счисления.
'''
##ans = []
##for n in range(10**4, 10**5):
##    r = f(n,20)
##    for x in 'AEI':
##        r = r.replace(x, '1')
##    r += f(n%20,20)
##    r = r[1:] + r[0]
##    for x in 'AEI':
##        r = r.replace(x, '1')
##    r += f(n%20,20)
##    r = r[1:] + r[0]
##    r = int(r, 20)
##    if r % 2030 == 0:
##        ans.append(r)
##print(max(ans))

'''
(№ 7649) *(Н. Сафронов) На вход алгоритма подаётся натуральное четырехзначное число N, в десятичной записи
которого есть как чётные, так и нечётные цифры (к другим числам алгоритм неприменим). Алгоритм строит по
нему новое число R следующим образом:
1. Из всех четных цифр числа N составляется наибольшее число.
2. Из всех нечетных цифр числа N составляется наименьшее число.
3. Вычисляется сумма двух чисел, построенных в результате шагов 1 и 2.
Укажите максимальное число R, которое может быть результатом работы данного алгоритма и в котором все
цифры десятичной записи идут в порядке убывания.
'''
from itertools import *

ans = []
for n in range(1102, 1103):
    if any(x in '13579' for x in str(n)) and any(x in '02468' for x in str(n)):
        
        k0 = [x for x in str(n) if x in '02468']
        num0 = max([int(''.join(x)) for x in permutations(''.join(k0))])
        
        k1 = [x for x in str(n) if x in '13579']
        num1 = min([int(''.join(x)) for x in permutations(''.join(k1))])

        r = num0 + num1
        print(k0, k1, r)
  















'''
(№ 7) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему
новое число R следующим образом.
1. Строится двоичная запись числа N.
2. К этой записи дописываются справа ещё два разряда по следующему правилу:
а) складываются все цифры двоичной записи, и остаток от деления суммы на 2
дописывается в конец числа (справа). Например, запись 11100 преобразуется в
запись 111001;
б) над этой записью производятся те же действия – справа дописывается остаток
от деления суммы цифр на 2.
Полученная таким образом запись (в ней на два разряда больше, чем в записи
исходного числа N) является двоичной записью искомого числа R. Укажите такое
наименьшее число N, для которого результат работы алгоритма больше 125.
В ответе это число запишите в десятичной системе счисления.
'''
##for n in range(1, 2000):
##    r = bin(n)[2:]
##    r += str(r.count('1')%2)
##    r += str(r.count('1')%2)
##    r = int(r, 2)
##    if r > 125:
##        print(n)
##        break

"""
(№ 7639) (Демо-2025) На вход алгоритма подаётся натуральное число N. Алгоритм
строит по нему новое число R следующим образом.
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу:
  а) если число чётное, то к двоичной записи числа слева дописывается 10;
  б) если число нечётное, то к двоичной записи числа слева дописывается 1 и
  справа дописывается 01.
Полученная таким образом запись (в ней на два разряда больше, чем в записи
исходного числа N) является двоичной записью искомого числа R. Например, для
исходного числа 4 = 1002 результатом является число 20 = 101002, а для
исходного числа 5 = 1012 это число 53 = 1101012.
Укажите максимальное число R,
которое может быть результатом работы данного алгоритма, при условии, что N не
больше 12. В ответе запишите это число в десятичной системе счисления.
"""
##ans = []
##for n in range(1, 13):
##    r = bin(n)[2:]
##    if n % 2 == 0:
##        r = '10' + r
##    else: r = '1' + r + '01'
##    r = int(r, 2)
##    ans.append(r)
##print(max(ans))

'''
(№ 7385) (А. Минак) На вход алгоритма подаётся натуральное число N. Алгоритм
строит по нему новое число R следующим образом.
1. Строится запись числа N в четверичной системе счисления (системе с
основанием 4).
2. Далее эта запись обрабатывается по следующему правилу:
  а) если число N делится на 4, то к этой записи дописываются две последние
  цифры четверичной записи;
  б) если число N на 4 не делится, то остаток от его деления 4 умножается на 5,
  переводится в четверичную систему счисления и дописывается в конец числа.
Полученная таким образом запись является четверичной записью искомого числа R.
Например, для исходного числа 17 = 1014 результатом является число 101114 = 277,
а для исходного числа 24 = 1204 это число 120204 = 392.
Укажите максимальное число N, после обработки которого с помощью этого
алгоритма получается число R, меньшее 555.
'''


##ans = []
##for n in range(1, 1000):
##    r = f(n,4)
##    if n % 4 == 0:
##        r += r[-2:]
##    else:
##        r += f((n%4)*5,4)
##    r = int(r, 4)
##    if r < 555:
##        ans.append(n)
##print(max(ans))
        
'''
(№ 7667) *(П. Финкель) На вход алгоритма подаётся шестизначное натуральное
число N. Алгоритм строит по нему новое число R следующим образом:
1. Число N переводится в систему счисления с основанием 19.
2. Далее эта запись обрабатывается по следующему правилу:
  а) согласные буквы (В, C, D, F, G, H) заменяются на 5;
  б) в начало полученной записи дописывается остаток от деления числа N на 19
  в 19-ричной системе счисления;
  в) две последние цифры записи переставляются в начало (например, из строки 12345
  получается 45123).
3. Действия а)-в) в п. 2. повторяются еще раз.
Полученная таким образом запись записью искомого числа R в системе счисления
с основанием 19. Укажите максимальное число R с суммой цифр, кратной 7, которое
может быть получено в результате работы алгоритма. Запишите его в ответе в
десятичной системе счисления.
'''
##ans = []
##for n in range(10**5, 10**6):
##    r = f(n, 19)
##    for y in 'BCDFGH':
##        r = r.replace(y,'5')
##    r = f(n%19,19) + r
##    r = r[-2:] + r[:-2]
##    for y in 'BCDFGH':
##        r = r.replace(y,'5')
##    r = f(n%19,19) + r
##    r = r[-2:] + r[:-2]
##    k = sum(int(x) for x in str(int(r,19)))
##    if k % 7 == 0:
##        ans.append(int(r,19))
##print(max(ans))

'''
№ 5899 (Уровень: Сложный)
(Д. Тараскин) Автомат получает на вход трёхзначное число. По этому числу строится новое число по следующим правилам:
1) Из цифр, образующих десятичную запись N, строятся все возможные двузначные числа
(числа не могут начинаться с нуля).
2) Из получившихся двузначных чисел выбираются только те, которые являются простыми. Каждую цифру трехзначного числа
можно использовать ровно столько раз, сколько она встречается в этом числе. К примеру, возьмем число 123.
Из него можно составить числа: 12, 13, 21, 31, 23, 32.
Для какого наибольшего N количество выбранных простых чисел будет максимальным?
'''
##from itertools import *
##def isprime(n):
##    if n == 1: return 0
##    for k in range(2, int(n**0.5)+1):
##        if n % k == 0:
##            return 0
##    return 1
##
##mx = 0
##mn = 1
##for n in range(10**2, 10**3):
##    k = [int(''.join(x)) for x in permutations(str(n), r = 2) if x[0] != '0' and isprime(int(''.join(x)))]
##    if len(k) >= mx:
##        mx = len(k)
##        mn = n
##print(mn)


























